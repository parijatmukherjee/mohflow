#!/usr/bin/env python3
"""
Manual demo that shows the automation framework working
without requiring FastAPI/Mohnitor hub dependencies.

This demonstrates that the testing structure is complete
and ready to use once dependencies are installed.
"""

import sys
import time
import threading
from pathlib import Path

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent / "src"))

from mohflow import get_logger


class DemoLogGenerator:
    """Demo log generator that works without Mohnitor hub."""

    def __init__(self, service_name="demo-app"):
        # Use regular MohFlow logger (without enable_mohnitor=True)
        self.logger = get_logger(service=service_name)
        self.running = False
        self.thread = None

    def start(self):
        """Start generating logs."""
        if self.running:
            return

        self.running = True
        self.thread = threading.Thread(target=self._generate_logs, daemon=True)
        self.thread.start()

    def stop(self):
        """Stop generating logs."""
        self.running = False
        if self.thread:
            self.thread.join(timeout=1)

    def _generate_logs(self):
        """Generate various log messages."""
        counter = 0
        while self.running and counter < 10:  # Limit for demo
            counter += 1

            if counter % 3 == 0:
                self.logger.error("Demo error log",
                                error_code=f"ERR{counter:03d}",
                                trace_id=f"demo-{counter}")
            elif counter % 2 == 0:
                self.logger.warning("Demo warning log",
                                  memory_usage=f"{85 + counter}%",
                                  trace_id=f"demo-{counter}")
            else:
                self.logger.info("Demo info log",
                               user_id=f"user{counter}",
                               trace_id=f"demo-{counter}")

            time.sleep(0.5)

    def generate_scenarios(self):
        """Generate specific test scenarios."""
        # Authentication scenario
        self.logger.info("User authentication started",
                        user_id="demo_user",
                        trace_id="auth-demo")
        self.logger.info("Authentication successful",
                        user_id="demo_user",
                        session_id="sess-123",
                        trace_id="auth-demo")

        # Error scenario
        self.logger.error("Payment processing failed",
                         payment_id="pay-demo",
                         error="Demo error",
                         trace_id="payment-demo")

        # Performance scenario
        self.logger.warning("Slow response detected",
                           response_time="2.1s",
                           endpoint="/api/demo",
                           trace_id="perf-demo")


def print_header(title):
    """Print formatted header."""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print(f"{'='*60}")


def print_status(message, status="INFO"):
    """Print status message."""
    symbols = {"INFO": "ℹ️", "SUCCESS": "✅", "ERROR": "❌", "WARNING": "⚠️"}
    print(f"{symbols.get(status, 'ℹ️')} {message}")


def demo_log_generation():
    """Demonstrate log generation functionality."""
    print_header("📊 Log Generation Demo")

    print_status("Creating demo log generator...")
    generator = DemoLogGenerator("automation-demo")

    print_status("Starting background log generation...")
    generator.start()

    time.sleep(2)

    print_status("Generating specific test scenarios...")
    generator.generate_scenarios()

    time.sleep(2)

    print_status("Stopping log generation...")
    generator.stop()

    print_status("Log generation demo completed", "SUCCESS")


def demo_test_structure():
    """Demonstrate test structure validation."""
    print_header("🏗️ Test Structure Demo")

    test_dir = Path(__file__).parent

    print_status("Checking automation test files...")

    required_files = [
        ("test_app.py", "Test application with log scenarios"),
        ("test_e2e_simple.py", "Simple end-to-end tests"),
        ("test_browser_ui.py", "Browser automation tests"),
        ("test_ui_automation.py", "Comprehensive test suite"),
        ("test_mock_automation.py", "Framework validation tests"),
        ("README.md", "Complete documentation")
    ]

    all_exist = True
    for filename, description in required_files:
        file_path = test_dir / filename
        if file_path.exists():
            print_status(f"✓ {filename} - {description}", "SUCCESS")
        else:
            print_status(f"✗ {filename} - Missing", "ERROR")
            all_exist = False

    # Check script
    script_path = test_dir.parent.parent.parent / "scripts" / "run_ui_tests.sh"
    if script_path.exists():
        print_status("✓ run_ui_tests.sh - Test runner script", "SUCCESS")
    else:
        print_status("✗ run_ui_tests.sh - Missing", "ERROR")
        all_exist = False

    if all_exist:
        print_status("All test files are present and ready", "SUCCESS")
    else:
        print_status("Some test files are missing", "WARNING")

    return all_exist


def demo_import_structure():
    """Demonstrate import structure."""
    print_header("📦 Import Structure Demo")

    try:
        # Test core imports
        print_status("Testing core MohFlow imports...")
        from mohflow import get_logger
        print_status("✓ mohflow.get_logger imported", "SUCCESS")

        # Test automation imports
        print_status("Testing automation test imports...")

        try:
            from .test_app import TestLogGenerator
            print_status("✓ TestLogGenerator imported", "SUCCESS")
        except ImportError as e:
            print_status(f"⚠️ TestLogGenerator import (expected in module context): {e}", "WARNING")

        # Test optional imports
        print_status("Testing optional dependencies...")

        try:
            import selenium
            print_status("✓ Selenium available", "SUCCESS")
        except ImportError:
            print_status("⚠️ Selenium not available (browser tests will be skipped)", "WARNING")

        try:
            import fastapi
            print_status("✓ FastAPI available", "SUCCESS")
        except ImportError:
            print_status("⚠️ FastAPI not available (hub tests will fail)", "WARNING")

        try:
            import requests
            print_status("✓ Requests available", "SUCCESS")
        except ImportError:
            print_status("✗ Requests not available", "ERROR")

        return True

    except ImportError as e:
        print_status(f"Import error: {e}", "ERROR")
        return False


def demo_test_scenarios():
    """Demonstrate test scenarios that would run."""
    print_header("🎯 Test Scenarios Demo")

    scenarios = [
        ("UI Loading Test", "Verify Mohnitor interface loads in browser"),
        ("Log Display Test", "Verify logs appear in real-time"),
        ("WebSocket Test", "Verify WebSocket connection established"),
        ("Filtering Test", "Verify search and filter functionality"),
        ("Multi-Service Test", "Verify multiple services are discovered"),
        ("High Volume Test", "Verify system handles high log volumes"),
        ("Error Styling Test", "Verify error logs have proper styling"),
        ("API Endpoint Test", "Verify all REST endpoints respond")
    ]

    print_status("Available test scenarios:")
    for scenario, description in scenarios:
        print(f"  • {scenario}: {description}")

    print_status(f"Total scenarios: {len(scenarios)}", "SUCCESS")


def demo_usage_modes():
    """Demonstrate available usage modes."""
    print_header("🚀 Usage Modes Demo")

    modes = [
        ("Simple Mode", "./scripts/run_ui_tests.sh --simple",
         "HTTP API tests only (no browser required)"),
        ("Browser Mode", "./scripts/run_ui_tests.sh --browser",
         "Full browser automation with Selenium"),
        ("Visible Mode", "./scripts/run_ui_tests.sh --browser --visible",
         "Browser tests with visible window"),
        ("Manual Mode", "./scripts/run_ui_tests.sh --manual",
         "Interactive mode with live UI"),
        ("Install Mode", "./scripts/run_ui_tests.sh --install-deps",
         "Install Selenium dependencies")
    ]

    print_status("Available usage modes:")
    for mode, command, description in modes:
        print(f"  {mode}:")
        print(f"    Command: {command}")
        print(f"    Description: {description}")
        print()


def main():
    """Run the manual demo."""
    print_header("🎪 Mohnitor UI Automation - Manual Demo")

    print_status("This demo shows the automation framework is ready to use")
    print_status("Once FastAPI and Selenium dependencies are installed")

    # Run demo components
    success_count = 0
    total_tests = 4

    # Test 1: Log generation
    try:
        demo_log_generation()
        success_count += 1
    except Exception as e:
        print_status(f"Log generation demo failed: {e}", "ERROR")

    # Test 2: Test structure
    try:
        if demo_test_structure():
            success_count += 1
    except Exception as e:
        print_status(f"Test structure demo failed: {e}", "ERROR")

    # Test 3: Import structure
    try:
        if demo_import_structure():
            success_count += 1
    except Exception as e:
        print_status(f"Import structure demo failed: {e}", "ERROR")

    # Test 4: Test scenarios
    try:
        demo_test_scenarios()
        success_count += 1
    except Exception as e:
        print_status(f"Test scenarios demo failed: {e}", "ERROR")

    # Show usage modes
    demo_usage_modes()

    # Final results
    print_header("🎯 Demo Results")
    print_status(f"Demo components completed: {success_count}/{total_tests}")

    if success_count == total_tests:
        print_status("✨ All demo components successful!", "SUCCESS")
        print_status("The automation framework is ready to use")

        print_header("📋 Next Steps")
        print_status("1. Install dependencies:")
        print("   pip install fastapi uvicorn websockets")
        print("   pip install selenium webdriver-manager")
        print()
        print_status("2. Run simple tests:")
        print("   ./scripts/run_ui_tests.sh --simple")
        print()
        print_status("3. Run browser tests:")
        print("   ./scripts/run_ui_tests.sh --browser")
        print()
        print_status("4. Manual testing:")
        print("   ./scripts/run_ui_tests.sh --manual")

        return 0
    else:
        print_status("Some demo components had issues", "WARNING")
        return 1


if __name__ == "__main__":
    sys.exit(main())